from Principal-functions-libraries import *


#################################################
# QUANTUM TELEPORTATION: weighted mean fidelity #
#################################################
def quantum_teleportation_ponderada (AB, C, n, m, instruccions):
    #calculem les dimensions dels sistemes involuctrats
    dim_AB = 2**n
    dim_C = 2**m

    if dim_C**2 != dim_AB:
        print("Aquest algoritme només pot funcionar si la dimensió del sistema que es vol teleportar, m, satisfà que m^2=n, on n es la dimensió del sistema entrellaçat.")
        exit(1)

    CAB = preparacio_sistema(AB,C,n,m)

    mitjana_pond = 0
    for i in range(4):
      #calculem l'estat de B després que A hagi realitzat una mesura de Bell sobre el sistema CA
      tele = np.transpose(np.dot(Estats_Bell_bra[i], CAB))
      norma_tele = np.linalg.norm(np.transpose(tele)[0])
      outcome_probability = norma_tele**2

      #mirem si algun estat teleportat és zero
      if norma_tele != 0:
        tele = np.divide(tele,norma_tele)

        # estat de B després d'haver fet una transformació local sobre el seu
        # qubit seguint un codi
        tele = np.dot(instruccions[i],tele)

        #calculem la fidelitat del transport
        F = np.dot(np.transpose(np.conjugate(tele)),C)[0][0]
        F *= F.conjugate()
        F = F.real
        #calculem la mitjana ponderada amb pesos les outcome probabilities
        mitjana_pond += outcome_probability * F

    if (1-eps) <  mitjana_pond < (1+eps):
            mitjana_pond = 1

    return mitjana_pond




#########################################################
# QUANTUM TELEPORTATION: n-qubits depending on an angle #
#########################################################

inici_Bell = 0
final_Bell = 3

ruta = f'Bell{inici_Bell}--Bell{final_Bell}/F_values'
if not os.path.exists(ruta):
  os.makedirs(ruta)

file1 = open(ruta + '/angles.txt',"w")
file2 = open(ruta + '/angles_error_positiu.txt',"w")
file3 = open(ruta + '/angles_error_negatiu.txt',"w")

# fixem les insruccions1
instruccions1 = Matrius_pauli[[0,1,2,3]]

# fixem les insruccions2
instruccions2 = Matrius_pauli[[3,2,1,0]]

angle_inici = 0               
angle_final = np.pi           
n_angles = 2000        
angles = np.linspace(angle_inici, angle_final, n_angles) 

# Generem una llista d'estats C random que serà la mateixa per a cada angle
experiments = 10000
estats_C = []
for _ in range(experiments):
  C = generar_llista_complexa(2, (-100, 100), (-100, 100))
  C,m = preparacio_estat(C)
  estats_C.append([C,m])


for angle in angles:
  AB = [np.cos(angle),np.sin(angle),-np.sin(angle),np.cos(angle)]
  AB,n = preparacio_estat(AB)

  if np.pi/4 <= angle < np.pi*3/4:
    instruccions = instruccions2
  else:
    instruccions = instruccions1

  if angle < angle_final/2:
    instruccions = instruccions1
  else:
    instruccions = instruccions2

  conjunt_F = []
  for C,m in estats_C:
    F = quantum_teleportation_ponderada(AB,C,n,m,instruccions2)
    conjunt_F.append(F)

  mean = np.mean(conjunt_F)
  error = np.std(conjunt_F, ddof=1)

  file1.write("%f   " %angle)
  file1.write(" %f\n" %mean)

  error_positiu = mean + error/np.sqrt(experiments)
  file2.write("%f   " %angle)
  file2.write(" %f\n" %error_positiu)

  error_negatiu = mean - error/np.sqrt(experiments)
  file3.write("%f   " %angle)
  file3.write(" %f\n" %error_negatiu)

file1.close()
file2.close()
file3.close()







