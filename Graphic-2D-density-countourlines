from MCTM-agorithm import *

inici_Bell = 0
final_Bell = 3

# característiques de les gràfiques
fig, axes = plt.subplots(3, 4, sharex=True, sharey=True, figsize=(13, 6))
fig.subplots_adjust(wspace=0.25,hspace=0.25)
parametres = [r'$\alpha$',r'$\beta$',r'$\gamma$']

h_vals = np.linspace(0, 2*np.pi, 2000)
x_etiquetes = ['0', r'$\pi/2$',  r'$\pi$', r'$3\pi/2$', r'$2\pi$']
y_etiquetes = ['0', r'$\dfrac{\pi}{2}$',  r'$\pi$', r'$\dfrac{3\pi}{2}$', r'$2\pi$']
ticks = [0, np.pi*2/4, np.pi, np.pi*6/4, np.pi*8/4]


for i in range (3):
    axes[i,0].set_ylabel(parametres[(i+1)%3], fontsize=13, rotation=0, labelpad=10)
    axes[i,0].set_yticks(ticks, y_etiquetes, fontsize=11)
    for j in range(4):
        axes[i,j].set_xticks(ticks)
        axes[i,j].set_yticks(ticks)
        axes[i,j].set_xlabel(parametres[i], fontsize=13)
        if i==0:
            axes[0,j].set_title(rf'Outcome $|\phi_{j}\rangle$', fontsize=14)
        if i==2:
            axes[2,j].set_xticks(ticks, x_etiquetes, fontsize=11)    



angles = [0.349,0.698,0.785,1.047,1.396,1.745,2.094,2.356,2.443,2.792]
angles_labels = [r'$\pi/9$',r'$2\pi/9$',r'$\pi/4$',r'$3\pi/9$',r'$4\pi/9$',r'$5\pi/9$',r'$6\pi/9$', r'$3\pi/4$', r'$7\pi/9$',r'$8\pi/9$']
n_angles = len(angles)

colormap = plt.cm.cividis  # Pots canviar 'viridis' per un altre colormap: plasma, inferno, magma, cividis, viridis
colors = [colormap(i / (n_angles - 1)) for i in range(n_angles)]

handles=[]

for k,angle in enumerate(angles):
    handles.append(Line2D([0], [0], color=colors[k], label=angles_labels[k]))


    xx = np.load(f'Bell{index_Bell}--Bell{final_Bell}/Angles/{N}-{a}-{T}$${num_estats_C}/density_2D/punts_xx/{angle}.npy')
    yy = np.load(f'Bell{inici_Bell}--Bell{final_Bell}/Angles/{N}-{a}-{T}$${num_estats_C}/density_2D/punts_yy/{angle}.npy')
    zz = np.load(f'Bell{inici_Bell}--Bell{final_Bell}/Angles/{N}-{a}-{T}$${num_estats_C}/density_2D/punts_zz/{angle}.npy')

    for i in range(4):
        for j in range(3):
            x = xx[i][j].flatten()
            y = yy[i][j].flatten()
            z = zz[i][j].flatten()

            # Crear una graella (x_grid, y_grid) i interpolar z a aquesta graella
            xi = np.linspace(min(x), max(x), 100)
            yi = np.linspace(min(y), max(y), 100)
            x_grid, y_grid = np.meshgrid(xi, yi)
            z_grid = griddata((x, y), z, (x_grid, y_grid), method='cubic')

            # Trobar un llindar (per exemple, 90% del valor màxim de z)
            threshold = 0.9 * np.nanmax(z_grid)

            contour = axes[j,i].contour(x_grid, y_grid, z_grid, levels=[threshold], alpha=0.6, colors=colors[k]) 



fig.legend(loc='upper right', bbox_to_anchor=(1, 0.89), handles=handles, title=r'Values of $\theta$', fontsize=13)


plt.savefig("grafica.pdf", format="pdf", bbox_inches="tight")

plt.show()

