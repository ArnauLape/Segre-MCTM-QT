from MCTM-algorithm import *

# característiques de les gràfiques
fig, axes = plt.subplots(4, 3, sharex=True, sharey=True, figsize=(15, 5))
fig.subplots_adjust(wspace=0.2,hspace=0.05)
parametres = [r'$\beta$',r'$\gamma$',r'$\theta$']

h_vals = np.linspace(0, 2*np.pi, 2000)
etiquetes = ['0', r'$\frac{1}{2}\pi$',  r'$\pi$', r'$\frac{3}{2}\pi$', r'$2\pi$']
ticks = [0, np.pi*2/4, np.pi, np.pi*6/4, np.pi*8/4]

cmap_colors = ['Blues','Reds','Greens','Oranges']
colors_legend = ['blue','red','green','orange']


for i in range (2):
    axes[3,i].set_ylabel(parametres[(i+1)%3], fontsize=12)
    axes[3,0].set_yticks(ticks, etiquetes)
    axes[3,i].set_xlabel(parametres[i], fontsize=12)
    axes[3,i].set_xticks(ticks, etiquetes)


xx = np.load(f'Bell{index_Bell}/density_2D/punts_xx/{N}-{a}-{T}-{burn_in_period}$${num_estats_C}.npy')
yy = np.load(f'Bell{index_Bell}/density_2D/punts_yy/{N}-{a}-{T}-{burn_in_period}$${num_estats_C}.npy')
zz = np.load(f'Bell{index_Bell}/density_2D/punts_zz/{N}-{a}-{T}-{burn_in_period}$${num_estats_C}.npy')

for i in range(1):
    for j in range(1):
        x = xx[i][j]
        y = yy[i][j]
        z = zz[i][j]
        print(x.shape, y.shape, z.shape)
        Zpos = np.ma.masked_greater(z, 0)
        grafic = axes[i,j].pcolormesh(x, y, z, shading='gouraud', cmap=cmap_colors[i]) # nearest, gouraud, auto, shading='gouraud'
        cbar = fig.colorbar(grafic, ax=axes[i,j], shrink=0.8)
        cbar.locator = ticker.MaxNLocator(nbins=5)  # Redueix el nombre de ticks
        cbar.update_ticks()  # Actualitza la barra amb els nous ticks
        cbar.minorticks_on()
        cbar.ax.tick_params(labelsize=8)  # Ajusta la mida del text dels ticks

handles=[]
for i in range(4):
    handles.append(Line2D([0], [0], color=colors_legend[i], label=rf"$|\phi_{i}\rangle$"))

handles.append(Line2D([0], [0], color='white', label=f"N = {N}"))
handles.append(Line2D([0], [0], color='white', label=r'$\sigma^2=$'f"{a}"))
handles.append(Line2D([0], [0], color='white', label=f"T = {T}"))
handles.append(Line2D([0], [0], color='white', label=f"k = {num_trials}"))
handles.append(Line2D([0], [0], color='white', label=f"Burn-in = {burn_in_period}"))
handles.append(Line2D([0], [0], color='white', label=f"#Estats C = {num_estats_C}"))

fig.legend(loc='upper right', bbox_to_anchor=(1, 0.85), handles=handles, title = "MCTM",fontsize=7)

# Afegir un títol general
fig.suptitle(rf"$|\Phi\rangle=|\phi_{index_Bell}\rangle$", fontsize=16)

# Afegir títols als eixos
fig.text(0.04, 0.5, r"$\gamma$", va='center', fontsize=12)  
fig.text(0.3, 0.5, r"$\theta$", va='center', fontsize=12)
fig.text(0.6, 0.5, r"$\beta$", va='center', fontsize=12)



plt.show()

